{"version":3,"sources":["firebase.js","Header.js","Home.js","Compose.js","Footer.js","Expand.js","Filter.js","NavButton.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","React","memo","props","className","icon","size","href","onClick","action","Home","displayContent","title","substring","date","content","deleteEntry","id","aria-label","expandEntry","Compose","changeHandler","event","userInputObj","state","dairyEntry","setState","target","name","value","moment","format","onSubmit","submitHandler","htmlFor","type","this","placeholder","maxLength","onChange","required","Component","Footer","year","Date","getFullYear","Expand","recordInFocus","dairyContent","closeExpandedNote","key","Filter","resetSelection","preventDefault","month","day","yearOption","currentYear","i","push","numberOfDay","dayArray","createYearArray","monthOption","monthsShort","numberOfDays","getDate","dayOption","createDayArray","map","index","filterData","filter","NavButton","disabled","startCounter","updateCounter","endCounter","library","add","fab","faFeatherAlt","faTrashAlt","faExpandAlt","faPlusCircle","faMinusCircle","faCalendarMinus","faEdit","faTimesCircle","App","setActiveTab","activeTab","showCompose","showHome","showExpand","recordCounter","userInput","database","ref","child","remove","dairyData","data","userFilter","selectedOptionYear","selectedOptionMonth","selectedOptionDay","copyDairyData","filterdairyData","filteredDairyData","parseInt","getMonth","counter","maxRecordOnPage","length","getNextRecords","recordsSet","endIndex","slice","getDatabaseData","on","response","val","dairyDataArray","hasOwnProperty","element","showFileterdDairyData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.076b9979.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';Â  \n\nlet firebaseConfig = {\n    apiKey: \"AIzaSyDU0kFCtN-ggzhzrn8rltvhMD3aAS-DtP4\",\n    authDomain: \"react-firebase-project5.firebaseapp.com\",\n    databaseURL: \"https://react-firebase-project5.firebaseio.com\",\n    projectId: \"react-firebase-project5\",\n    storageBucket: \"react-firebase-project5.appspot.com\",\n    messagingSenderId: \"755864469537\",\n    appId: \"1:755864469537:web:e40fed3c5570eb9ffa6360\"\n  };\n  // Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n//---------React.memo--to stop re rendering the component------------------//\nconst Header = React.memo(props => {\n    return(\n        <header>\n            <nav className = \"navBar wrapper\">\n                <div className = \"logo\">                  \n                    <h1>penDown<FontAwesomeIcon icon=\"feather-alt\" size=\"1x\"/></h1>\n                </div>               \n                <ul className = \"clearfix navItem\">\n                    <li><a href = \"#\" onClick = {() => {props.action(\"home\")}}>home</a></li>\n                    <li><a href = \"#\" onClick = {() => {props.action(\"compose\")}}>compose</a></li>\n                </ul>\n            </nav>\n        </header>\n    );   \n});\nexport default Header;","//-----------------------------Called from App.js Display dairy entries on home page-------------------//\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Home = (props) => {\n\n    return(\n        <div className = \"note\">\n            <div className = \"noteTitle clearfix\">\n                <h2>{props.displayContent.title.substring(0,40)}</h2>\n                <h3>{props.displayContent.date}</h3>\n            </div>\n            <div className = \"noteContent\">\n                <p>{props.displayContent.content.substring(0,45)}</p>\n                <div className = \"noteContentButton\">\n                    <button onClick = {() => {props.deleteEntry(props.id)}} aria-label=\"button to delete the selected note entry\">\n                        <FontAwesomeIcon icon=\"trash-alt\"/>\n                    </button>\n                    <button onClick = {() => {props.expandEntry(props.id)}} aria-label=\"button to expand the selected note entry to read more\">\n                        <FontAwesomeIcon icon = \"expand-alt\"/>\n                    </button>\n                </div>\n            </div>                 \n        </div>\n    );\n}\nexport default Home;","//-----------------------------Called from App.js Display form to enter dairy entry-------------------//\nimport React, { Component} from 'react';\nimport moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass Compose extends Component{\n    constructor(){\n        super();\n        this.state = {\n            dairyEntry:{\n                date:moment().format('YYYY-MM-DD'),//default entry for date input type\n                title:'',\n                content:''\n            }\n        }//end of this.state\n    }//End of constructor()\n\n    //---------------------------store user inputs in state to push it database-------------------------//\n    changeHandler = (event) => {\n        const userInputObj = this.state.dairyEntry;\n        this.setState({\n            dairyEntry:{\n                ...userInputObj,//spred to retain previous state\n                [event.target.name]:event.target.value\n            }\n        });//End of this.setState\n    }//End of changeHandler = (event)\n\n    render(){//render compose form to get user inputs\n         return(\n            <div className = \"wrapper\">\n                <form className = \"createNote\"  action = \"submit\" onSubmit = {(event) => {this.props.submitHandler(event,this.state.dairyEntry)}}>\n                    <div className = \"noteTitleHeader\">\n                        <label htmlFor = \"title\" className=\"visuallyHidden\">Enter title for the entry</label>\n                        <input id = \"title\" type = \"text\" name = \"title\" value = {this.state.dairyEntry.title} placeholder = \"Title\" maxLength = \"40\" onChange = {this.changeHandler}/>\n                        <label htmlFor = \"date\" className=\"visuallyHidden\">Select date for the entry</label>\n                        <input id = \"date\" type = \"date\" name = \"date\" value = {this.state.dairyEntry.date}  onChange = {this.changeHandler}/>\n                        {/*<FontAwesomeIcon icon =\"calendar-minus\" className=\"calenderIcon\"/>*/}\n                    </div>\n                    <div className = \"noteTextArea\">\n                        <label htmlFor = \"content\" className=\"visuallyHidden\">Enter content for the entry</label>\n                        <textarea  id = \"content\" name = \"content\" value = {this.state.dairyEntry.content}  placeholder = \"How you feeling today ?\" onChange = {this.changeHandler} required={true}/>    \n                    </div>\n                    <div className = \"noteComposeButton\" aria-label=\"submit button to save the  note entry\">\n                        <button type = \"submit\">\n                            <FontAwesomeIcon icon = \"plus-circle\"/>\n                        </button>               \n                    </div>\n                </form>\n            </div>//End of <div className = \"wrapper\">\n        );//End of return(\n    }//End of render()\n}\n\nexport default Compose;","import React from 'react';\n\n//---------React.memo--to stop re rendering the component------------------//\nconst Footer = React.memo( () => {\n    const year = new Date().getFullYear();\n    return(\n        <footer>\n            <div className = \"wrapper\">\n                <p>Copyright â {year}</p>\n            </div>\n        </footer>\n    );\n});\nexport default Footer;","//--------------Called from App.js expand theh dairy entry shown on home page on click of expand button-------------------//\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Expand = (props) => {\n    const {content, title, date} = props.recordInFocus.dairyContent;//destructure the props object\n    return(\n        <div className = \"wrapper\">\n            <div className = \"expandNoteContainer\">\n                <div className = \"expandNoteeHeader\">       \n                    <h2>{title}</h2>\n                    <h3>{date}</h3>\n                </div>\n                <div className = \"expandNoteContent\">\n                    <p>{content}</p>\n                </div> \n                <div className = \"noteComposeButton\">\n                    <button onClick = {props.closeExpandedNote} aria-label = \"button to close the current note and to go back to home page\">\n                        <FontAwesomeIcon icon = \"times-circle\"/>\n                    </button>\n                    <button onClick = {() => {props.deleteEntry( props.recordInFocus.key)}} aria-label=\"button to delete the note entry\">\n                        <FontAwesomeIcon icon=\"trash-alt\"/>\n                    </button>\n                </div>              \n            </div>\n        </div>\n    );\n}\nexport default Expand;","//--------------Called from App.js.filters result as per user selection to show on UI-------------------//\nimport React, { Component } from 'react';\nimport moment from 'moment';\n\nclass Filter extends Component{\n\n    constructor(){\n        super();\n        this.state ={\n            year:'year',//year selected by user\n            month:'month',//month selected by user\n            day:'day'//day selected by user\n        }\n    }//End of  constructor()\n    \n    //-------------------------stores filter selected by user in state---------------------------------------//\n    //-----State will be passed to App component to further filter the records--------------------------------//\n    onChange = (event) => {\n        this.setState({\n            [event.target.name]:event.target.value\n        });\n    }\n\n    //---------reset filter to show all records on click of reset button---------------------------------------//\n    resetSelection =(event) => {\n        event.preventDefault();\n        this.setState({\n            year:'year',\n            month:'month',\n            day:'day'\n        });\n    }\n\n    //-------------------------create array to show in year select option--------------------------------------//\n    createYearArray(){\n        const yearOption = [];\n        const currentYear = new Date().getFullYear();\n        for(let i=0;i<=10;i++){           \n            yearOption.push(currentYear - i);\n        }\n        return yearOption;\n    }\n\n    //-------------------------create array to show in day select option ------------------------------------//\n    createDayArray(numberOfDay){\n        const dayArray =[];\n        for(let i=1;i<=numberOfDay;i++){\n            dayArray.push(i);\n        }\n        return dayArray;\n    }\n    \n    render(){\n        const yearOption    =   this.createYearArray();//year array for year selection filter\n        const monthOption   =   moment.monthsShort();//month array for year selection filter\n        const numberOfDays  =   new Date(this.state.year, this.state.month, 0).getDate();//get number of days in selected year and month\n        const dayOption     =   this.createDayArray(numberOfDays);//day array for year selection filter\n        return(\n            <div className=\"homePageFilterFormContainer\">\n                <form className = \"dateFilterForm\">\n                    <div className=\"filterOptionContainer\">\n                        <div className  = \"filterYearSelection\">\n                            <select onChange = {this.onChange} value={this.state.year} name=\"year\">\n                                <option value = \"year\">year</option>\n                                {\n                                    yearOption.map((year,index)=>{\n                                        return(\n                                            <option key = {index} value = {year}>\n                                                {year}\n                                            </option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                        <div className = \"filterMonthSelection\">\n                            <select onChange = {this.onChange}  value = {this.state.month} name = \"month\">\n                                <option value = \"month\">month</option>\n                                {\n                                    monthOption.map((month,index) => {\n                                        return(\n                                            <option key = {index} value = {index+1}>\n                                                {month}\n                                            </option>\n                                        )\n                                    })\n                                }\n                            </select>\n                        </div>\n                        <div className = \"filterDaySelection\">\n                            <select onChange = {this.onChange} value = {this.state.day} name = \"day\">\n                                <option value = \"day\">day</option>\n                                {\n                                    dayOption.map((day,index) => {\n                                        return(\n                                            <option key = {index} value = {index+1}>\n                                                {day}\n                                            </option>\n                                        )\n                                    })\n                                }                           \n                            </select>\n                        </div>\n                    </div> \n                    <div className = \"filterButtonContainer\">\n                        <div className=\"filterButton\">\n                            <button onClick = {(event) => {this.props.filterData(event,{filter:{...this.state}})}}>\n                                Go\n                            </button>\n                        </div>\n                        <div className=\"resetButton\">\n                            <button onClick = {(event) => {this.resetSelection(event);this.props.filterData(event,{filter:{year:'year',month:'month',day:'day'}})}}>\n                                reset\n                            </button>\n                        </div>\n                    </div>          \n                </form>\n            </div>\n        );//End of return\n    }//End of  render()\n}\n\nexport default Filter;","//-----------------------------Called from App.js Display prev and next buttons on home page-------------------//\nimport React from 'react';\n\nconst NavButton = React.memo( props => {\n   return(\n        <div className=\"navButtonContainer\">\n            <button disabled = {props.startCounter} className=\"navBtn\" onClick={props.updateCounter} name=\"prev\" aria-label =\"click on button to go to previous page\">&laquo;</button>\n            <button disabled = {props.endCounter} className=\"navBtn\" onClick={props.updateCounter} name=\"next\" aria-label =\"click on button to go to next page\">&raquo;</button>\n        </div>\n   ) ;\n});\nexport default NavButton;","import React, { Component } from 'react';\n//--------------------font awesome library imports------START------------------//\nimport firebase from './firebase';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport {faFeatherAlt,faTrashAlt,faExpandAlt,faPlusCircle,faMinusCircle,faCalendarMinus,faEdit,faTimesCircle} from '@fortawesome/free-solid-svg-icons';\n//--------------------font awesome library imports------END-------------------//\n//--------------------components  imports------START--------------------------//\nimport Header from './Header';\nimport Home from './Home';\nimport Compose from './Compose';\nimport Footer from'./Footer';\nimport Expand from './Expand';\nimport Filter from './Filter';\nimport NavButton from './NavButton';\n//--------------------components  imports------END----------------------------//\n//--------------------style sheet import--------START-------------------------//\nimport './App.css';\n//--------------------style sheet import--------END---------------------------//\n\nlibrary.add(fab,faFeatherAlt,faTrashAlt,faExpandAlt,faPlusCircle,faMinusCircle,faCalendarMinus,faEdit,faTimesCircle);//font awesome library\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      dairyData:[],\n      filteredDairyData:[],\n      showCompose:false,\n      showHome:true,\n      showExpand:false,\n      recordInFocus:{},//stores record in focus on click of expand button\n      recordCounter:0,//counter for prev and next button\n      maxRecordOnPage:8// maximun number of records to be shown on home page\n      //calledFromExpand:false\n    }\n  }//End of constructor()\n\n  //-----------set state based on active tab called from Header Component-----------------------------------//\n  setActiveTab = (activeTab) => {\n    this.setState({\n      showCompose:(activeTab === \"compose\"?true:false),\n      showHome:(activeTab === \"home\"?true:false),\n      showExpand:false,\n      recordCounter:0,\n    });  \n  }//End of setActiveTab = (activeTab)\n\n  //----------------push data to database on form submit by user called from Compose Component-----------------//\n  submitHandler = (event,userInput) => {\n    event.preventDefault();\n    const dbRef = firebase.database().ref();\n    dbRef.push(userInput);\n    this.setState({\n      showCompose:false,\n      showHome:true,\n      showExpand:false,\n      //calledFromExpand:false\n    });\n  }//End of submitHandler = (event,userInput)\n\n  //----------------remove data to database on click of delete button called from Home Component---------------//\n  //---------------key variable stores the database key of the record user perform delete action on -----------//\n  deleteEntry =(key) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(key).remove();\n    this.setState({\n      showHome:true,\n      showExpand:false\n    });\n  }\n\n  //----------------expand record on click of expand button called from Home Component-------------------------//\n  //---------------key variable stores the database key of the record user perform delete action on -----------//\n  expandEntry = (key) =>{\n    const copyDairyDate = [...this.state.dairyData]\n    const recordInFocus = copyDairyDate.filter((data) => {\n      return(data.key === key);\n    });\n    this.setState({\n      showHome:false,\n      showExpand:true,\n      recordInFocus:recordInFocus[0]//get the first record with the filter criteria\n    });\n  }\n\n  //-----------filter logic based on year,month and day selection by user called from Filter Component----------//\n  //---------------------------userFilter is object contains user's filterselection----------------------------//\n  filterData = (event,userFilter) => {\n    event.preventDefault();\n    const selectedOptionYear = userFilter.filter.year === 'year' ? 'all':'';\n    const selectedOptionMonth = userFilter.filter.month === 'month' ? 'all':'';\n    const selectedOptionDay = userFilter.filter.day === 'day' ? 'all':'';\n    const copyDairyData = [...this.state.dairyData];\n    let filterdairyData =[];\n    if(selectedOptionYear === 'all' && selectedOptionMonth === 'all' && selectedOptionDay === 'all'){\n      this.setState({\n        filteredDairyData:copyDairyData,\n        recordCounter:0\n      });\n    }else{\n      filterdairyData = copyDairyData.filter((data) => {\n        //return all the records if user hasn't selected year to filter\n        return(selectedOptionYear === 'all' || (parseInt(new Date(data.dairyContent.date).getFullYear()) === parseInt(userFilter.filter.year)));\n     }).filter((data) => {\n        //return all the records if user hasn't selected month to filter\n        return(selectedOptionMonth === 'all' || (parseInt(new Date(data.dairyContent.date).getMonth()+1) === parseInt(userFilter.filter.month)));\n     }).filter((data) => {\n        //return all the records if user hasn't selected day to filter\n       return(selectedOptionDay === 'all' || (parseInt(new Date(data.dairyContent.date).getDate()+1) === parseInt(userFilter.filter.day)));\n     });\n     this.setState({\n       filteredDairyData:filterdairyData//set filtered data from above in state to show on UI\n     }); \n    }\n  }\n\n  //------------------------------update counter on click on pre or next button ------called from App component in render---//\n  updateCounter = (event) => {\n    let counter = this.state.recordCounter;\n    if(event.target.name === 'prev' && counter >0){\n      counter -= this.state.maxRecordOnPage;\n    }else if(event.target.name === 'next' && ((counter + this.state.maxRecordOnPage) < this.state.filteredDairyData.length)){//to disable the next button id no records to show \n      counter += this.state.maxRecordOnPage;\n    }\n    this.setState({\n      recordCounter:counter//update record counter in state\n    });\n  }\n\n  //-------------------------get record set to display on prev or next button ------called from App component in render---//\n  getNextRecords = (recordsSet) => {\n    const endIndex   =  (this.state.filteredDairyData.length) > (this.state.recordCounter + this.state.maxRecordOnPage)? (this.state.recordCounter + this.state.maxRecordOnPage) : (this.state.filteredDairyData.length);\n    return recordsSet.slice(this.state.recordCounter, endIndex);\n  }\n  \n  //----------------close the expanded record on click of  button called from Expand Component---------------------//\n  closeExpandedNote = () => {\n    this.setState({\n      showHome:true,\n      showExpand:false\n    });\n  }\n\n  //------------get firbase data and set in state on component loading--called from componentDidMount()--------//\n  getDatabaseData = () => {\n    const dbRef =  firebase.database().ref();\n    dbRef.on('value',(response)=>{\n      const dairyData = response.val();\n      const dairyDataArray =[];\n      for (const key in dairyData) {\n        if (dairyData.hasOwnProperty(key)) {\n          const element = dairyData[key]; \n          dairyDataArray.push({\n            key:key,\n            dairyContent:element\n          });\n        }\n      }\n      //------------set the data in state---------------------//\n      this.setState({\n        dairyData:dairyDataArray,\n        filteredDairyData:dairyDataArray\n      });\n    }); \n  }\n  //------------------------get databse data and store in state--------------------------------------------------//\n  componentDidMount(){   \n    this.getDatabaseData(); //get App data from firebase\n  }//End of componentDidMount()\n\n  //-------------------------------------------RENDER--------------------------------------------------------------//\n  render(){\n    //-------funtion return sliced array based on  number of records allowed to show on UI-------//\n    const showFileterdDairyData = this.getNextRecords([...this.state.filteredDairyData]);\n    return (\n      <div className=\"App\">\n        <Header action={this.setActiveTab}/>\n        <main>\n        {/*------conditionally render home , filter component and prev and next button----START------------------*/}\n        {this.state.showHome &&\n        (         \n          <section>\n            <div className=\"wrapper\">\n              <div className =\"homePageDiaryContent\">\n                {/*---------------conditionally render Filter component---START----- */}\n                { this.state.dairyData.length > 0 && (\n                  <Filter filterData = {this.filterData}/>\n                )} \n                {/*---------------conditionally render Filter component---END----- */}\n\n                {/*---------------conditionally render Filter Home---START--------- */}\n                <div className=\"homePage\">                         \n                { showFileterdDairyData.map((data)=>{\n                    return( \n                      <Home key = {data.key} displayContent = {data.dairyContent} deleteEntry={this.deleteEntry} id={data.key} expandEntry={this.expandEntry}/>\n                    );\n                  })             \n                }\n                </div>\n                {/*---------------conditionally render Filter Home--------END---------- */}\n\n                {/*---------------conditionally render prev and next buttons---START----- */}\n                {this.state.filteredDairyData.length > this.state.maxRecordOnPage && (\n                  <NavButton updateCounter = {this.updateCounter} startCounter = {this.state.recordCounter < 1} endCounter = {(this.state.recordCounter + this.state.maxRecordOnPage) > (this.state.filteredDairyData.length)}/>\n                )}\n                {/*---------------conditionally render prev and next buttons---END----- */}\n              </div>\n            </div>       \n          </section>\n          \n        )}{/* End of  {this.state.showHome && */}   \n\n        {/*-------------conditionally render comose component----START--------------*/}\n        <section>\n          <div className=\"composePage\">\n            {\n              this.state.showCompose && (<Compose submitHandler = {this.submitHandler}/>)\n            }\n          </div>\n        </section>\n        {/*-------------conditionally render compose component----END-----------------*/}\n\n        {/*-------------conditionally render expand component----START---------------*/}\n        <section>\n          <div className=\"expandPage\">\n            {\n              this.state.showExpand && (<Expand recordInFocus={this.state.recordInFocus} closeExpandedNote={this.closeExpandedNote} deleteEntry={this.deleteEntry}/>)\n            }\n          </div>\n        </section>\n        {/*-------------conditionally render expand component----END-----------------*/}     \n      </main> \n      <Footer/>\n      </div>//End of <div className=\"App\">\n    );//End of return\n  }//End of  render()\n}//End of class App extends Component\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}